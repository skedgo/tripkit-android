apply plugin: "com.android.library"
// To publish via JitPack.
// See https://jitpack.io/docs/ANDROID/.
apply plugin: 'digital.wup.android-maven-publish'
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"

android {
  compileSdkVersion versions.compileSdkVersion

  defaultConfig {
    minSdkVersion versions.proMinSdkVersion
    targetSdkVersion versions.targetSdkVersion
  }

  lintOptions {
    // Changing to warning because of https://github.com/square/okio/issues/58.
    warning "InvalidPackage"
  }
}

dependencies {
  testImplementation libs.junit
  testImplementation libs.assertjCore
  testImplementation libs.mockitoCore
  testImplementation libs.mockitoKotlin, { exclude group: "org.jetbrains.kotlin" }
  testImplementation libs.jodaTimeTzdb
  testImplementation libs.mockWebServer
  testImplementation libs.kluent
  testImplementation libs.robolectric
  testImplementation libs.androidxTesting
  testImplementation libs.androidxJUnitExtTesting

  implementation 'com.github.skedgo:commons-collections:v1.0'

  implementation project(":CommonCoreLegacy")
  implementation project(":TripKitDomain")
  implementation project(":TripKitDomainLegacy")
  api project(":route-persistence")
  implementation libs.dagger
  implementation libs.rxjava2
  implementation libs.rxrelay2
  implementation libs.jodaTimeAndroid
  implementation libs.roomRuntime
  implementation libs.roomRxjava2
  implementation libs.retrofitConverterGson
  implementation libs.retrofitAdapterRxJava
  implementation libs.retrofit

  kapt libs.roomCompiler
  implementation libs.koptional


  kapt libs.daggerCompiler
  kapt libs.value
  compileOnly libs.valueAnnotations
  compileOnly libs.builderAnnotations
  implementation libs.gson
  implementation libs.immutablesGson
  implementation libs.kotlin

  api project(':sqliteutils')
}


// build a jar with source files
task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

task javadoc(type: Javadoc) {
  failOnError  false
  source = android.sourceSets.main.java.sourceFiles
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

group = tripkitGroup
version = tripkitVersion

publishing {
  repositories {
    maven {
//      url = "file://${localMaven}"
      url = publishMavenUrl
      credentials {
        username = publishMavenUsername
        password = publishMavenToken
      }
    }
  }

  publications {
    mavenAar(MavenPublication) {
      groupId = group
      version = version
      from components.android
      pom {
        licenses {
          license {
            name = 'Commercial'
          }
        }

      }
    }
  }
}

