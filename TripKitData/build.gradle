apply plugin: "com.android.library"
// To publish via JitPack.
// See https://jitpack.io/docs/ANDROID/.
apply plugin: 'digital.wup.android-maven-publish'
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"

android {
  compileSdkVersion versions.compileSdkVersion

  defaultConfig {
    minSdkVersion versions.proMinSdkVersion
    targetSdkVersion versions.targetSdkVersion

    javaCompileOptions {
      annotationProcessorOptions {
        arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
      }
    }
  }

  lintOptions {
    // Changing to warning because of https://github.com/square/okio/issues/58.
    warning "InvalidPackage"
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8.toString()
  }

  publishing {
    singleVariant("release") {
      // if you don't want sources/javadoc, remove these lines
      withSourcesJar()
      withJavadocJar()
    }
  }
}

dependencies {
  testImplementation libs.junit
  testImplementation libs.assertjCore
  testImplementation libs.mockitoCore
  testImplementation libs.mockitoKotlin, { exclude group: "org.jetbrains.kotlin" }
  testImplementation libs.mockWebServer
  testImplementation libs.kluent
  testImplementation libs.robolectric
  testImplementation libs.androidxTesting
  testImplementation libs.androidxJUnitExtTesting

  implementation 'com.github.skedgo:commons-collections:v1.0'

  debugImplementation project(":CommonCoreLegacy")
  releaseImplementation project(":CommonCoreLegacy")
  debugImplementation project(":TripKitDomain")
  releaseImplementation project(":TripKitDomain")
  debugImplementation project(":TripKitDomainLegacy")
  releaseImplementation project(":TripKitDomainLegacy")
  debugApi project(":route-persistence")
  releaseApi project(":route-persistence")

  implementation libs.dagger
  implementation libs.rxjava2
  implementation libs.rxAndroid2
  implementation libs.rxrelay2
  implementation libs.jodaTimeAndroid
  implementation libs.retrofitConverterGson
  implementation libs.retrofitAdapterRxJava
  implementation libs.retrofit
  implementation libs.supportAnnotations
  implementation libs.koptional

  implementation libs.roomRuntime
  annotationProcessor libs.roomCompiler
  kapt libs.roomCompiler
  implementation libs.roomRxjava2

  kapt libs.daggerCompiler
  implementation libs.daggerAndroidSupport
  annotationProcessor libs.daggerCompiler
  annotationProcessor libs.daggerAndroidProcessor

  implementation libs.value
  implementation libs.kotlin
  implementation libs.gson
  implementation libs.immutablesGson

  kapt libs.value
  annotationProcessor libs.value

  kapt libs.gson
  annotationProcessor libs.gson

  kapt libs.valueAnnotations
  compileOnly libs.valueAnnotations

  kapt libs.builderAnnotations
  compileOnly libs.builderAnnotations

  kapt libs.immutablesGson
  annotationProcessor libs.immutablesGson

  //compileOnly libs.valueAnnotations
  //compileOnly libs.builderAnnotations

  implementation libs.javaxAnnotation
  compileOnly 'com.github.pengrad:jdk9-deps:1.0'

  debugApi project(':sqliteutils')
  releaseApi project(':sqliteutils')
}

kapt {
  correctErrorTypes = true
}

// build a jar with source files
task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    configurations.implementation.canBeResolved = true
    configurations.api.canBeResolved = true
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.implementation
    classpath += configurations.api
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

group = tripkitGroup
version = tripkitVersion

publishing {
  repositories {
    maven {
      url = "file://${localMaven}"
//      url = publishMavenUrl
      credentials {
        username = publishMavenUsername
        password = publishMavenToken
      }
    }
  }

  publications {
    release(MavenPublication) {
      groupId = group
      version = version
      artifactId = 'TripKitData'
      afterEvaluate {
        from components.release
      }
      pom {
        licenses {
          license {
            name = 'Commercial'
          }
        }
      }
      pom.withXml {
        asNode().dependencies.'*'
                .findAll() {
                  (it.scope.text() == 'runtime' || it.scope.text() == 'compile') &&
                          project.configurations.implementation.allDependencies.find {
                            dep -> dep.name == it.artifactId.text()
                          }
                }.each {
          it.appendNode("type", "aar")
        }
      }
    }
  }
}

