apply plugin: "com.android.library"
// To publish via JitPack.
// See https://jitpack.io/docs/ANDROID/.
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply plugin: "maven-publish"

android {

  namespace 'skedgo.tripkit.domain.legacy'

  compileSdkVersion versions.compileSdkVersion

  defaultConfig {
    minSdkVersion versions.proMinSdkVersion
    targetSdkVersion versions.targetSdkVersion
  }

  lintOptions {
    // Changing to warning because of https://github.com/square/okio/issues/58.
    warning 'InvalidPackage'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }
  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_17.toString()
  }

  publishing {
    singleVariant("release") {
      // if you don't want sources/javadoc, remove these lines
      withSourcesJar()
      withJavadocJar()
    }
  }
}

dependencies {
  debugImplementation project(":TripKitDomain")
  releaseImplementation project(":TripKitDomain")
  debugImplementation project(':CommonCoreLegacy')
  releaseImplementation project(':CommonCoreLegacy')

  implementation libs.dagger
  kapt libs.daggerCompiler
  kapt libs.value
  compileOnly libs.valueAnnotations
  compileOnly libs.builderAnnotations
  implementation libs.immutablesGson
  implementation libs.kotlin
  implementation libs.rxjava2
}

// build a jar with source files
task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  archiveClassifier.set('sources')
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    configurations.implementation.canBeResolved = true
    configurations.api.canBeResolved = true
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.implementation
    classpath += configurations.api
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveClassifier.set('javadoc')
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

group = tripkitGroup
version = tripkitVersion

publishing {
  repositories {
    maven {
      url = "file://${localMaven}"
      //url = publishMavenUrl
      credentials {
        username = publishMavenUsername
        password = publishMavenToken
      }
    }
  }

  publications {
    release(MavenPublication) {
      groupId = group
      version = version
      artifactId = 'TripKitDomainLegacy'
      afterEvaluate {
        from components.release
      }
      pom {
        licenses {
          license {
            name = 'Commercial'
          }
        }
      }
      pom.withXml {
        asNode().dependencies.'*'
                .findAll() {
                  (it.scope.text() == 'runtime' || it.scope.text() == 'compile') &&
                          project.configurations.implementation.allDependencies.find {
                            dep -> dep.name == it.artifactId.text()
                          }
                }.each {
          it.appendNode("type", "aar")
        }
      }
    }
  }
}

