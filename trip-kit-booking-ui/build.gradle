apply plugin: 'com.android.library'
apply plugin: 'digital.wup.android-maven-publish'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
  compileSdkVersion versions.compileSdkVersion

  defaultConfig {
    minSdkVersion versions.proMinSdkVersion
    targetSdkVersion versions.targetSdkVersion
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }

  buildFeatures {
    dataBinding true
  }

  lintOptions {
    checkReleaseBuilds true
    abortOnError false
  }

  testOptions {
    unitTests {
      includeAndroidResources = true
    }
  }
}

dependencies {
  testImplementation libs.junit
  testImplementation libs.assertjCore
  testImplementation libs.mockitoCore
  testImplementation libs.robolectric
  testImplementation libs.mockitoKotlin, { exclude group: 'org.jetbrains.kotlin' }
  testImplementation libs.androidxTesting

  androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0', {
    exclude group: 'com.android.support', module: 'support-annotations'
  }

  implementation project(':TripKitAndroid')
  implementation project(':CommonCoreLegacy')
  implementation project(':trip-kit-booking')

  implementation 'uk.co.chrisjenx:calligraphy:2.3.0'
  implementation 'com.github.skedgo:robotos:v1.1'

  implementation libs.dagger
  kapt libs.daggerCompiler

  implementation 'com.squareup.picasso:picasso:2.5.2'
  implementation 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.0.2'
  implementation libs.bindingCollectionAdapter
  implementation libs.bindingCollectionAdapterRecyclerView

  implementation project(':rxlifecyclecomponents')
  implementation libs.kotlin
  implementation libs.gson
  implementation libs.rxjava2
  implementation libs.rxAndroid2

}



// build a jar with source files
task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

task javadoc(type: Javadoc) {
  failOnError  false
  source = android.sourceSets.main.java.sourceFiles
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  classpath += configurations.implementation
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

group = tripkitGroup
version = tripkitVersion

publishing {
  repositories {
    maven {
      url = "file://${localMaven}"
      //url = publishMavenUrl
      credentials {
        username = publishMavenUsername
        password = publishMavenToken
      }
    }
  }

  publications {
    mavenAar(MavenPublication) {
      groupId = group
      version = version
      from components.android
      pom {
        licenses {
          license {
            name = 'Commercial'
          }
        }
      }
      pom.withXml {
        asNode().dependencies.'*'
                .findAll() {
                  ((it.scope.text() == 'runtime' || it.scope.text() == 'compile') || it.scope.text() == 'compile') &&
                          project.configurations.implementation.allDependencies.find {
                            dep -> dep.name == it.artifactId.text()
                          }
                }.each {
          it.appendNode("type", "aar")
        }
      }
    }
  }
}

