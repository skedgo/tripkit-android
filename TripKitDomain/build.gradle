apply plugin: "kotlin"
apply plugin: "kotlin-kapt"
apply plugin: 'java'
apply plugin: 'maven-publish'

// To fix error of converting bytecode to dex.
//targetCompatibility = '1.7'
//sourceCompatibility = '1.7'

dependencies {
    testImplementation libs.junit
    testImplementation libs.assertjCore
    testImplementation libs.mockitoCore
    testImplementation libs.mockitoKotlin

    implementation libs.jodaTimeAndroid
    implementation libs.rxjava2
    implementation libs.dagger
    kapt libs.daggerCompiler
    implementation libs.gson

    implementation libs.kotlin
    kapt libs.value
    compileOnly libs.immutablesAndroidStub
    compileOnly libs.value
    implementation libs.javaxAnnotation
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

group = tripkitGroup
version = tripkitVersion

publishing {
    repositories {
        maven {
            url = "file://${localMaven}"
            //url = publishMavenUrl
            credentials {
                username = publishMavenUsername
                password = publishMavenToken
            }
        }
    }

    publications {
        release(MavenPublication) {
            groupId = group
            version = version
            artifactId = 'TripKitDomain'
            from components.java
            pom {
                licenses {
                    license {
                        name = 'Commercial'
                    }
                }
            }
            pom.withXml {
                asNode().dependencies.'*'
                    .findAll() {
                        (it.scope.text() == 'runtime' || it.scope.text() == 'compile') &&
                            project.configurations.implementation.allDependencies.find {
                                dep -> dep.name == it.artifactId.text()
                            }
                    }.each {
                    it.appendNode("type", "aar")
                }
            }
        }
    }
}

