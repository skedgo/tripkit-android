apply plugin: "com.android.library"
// To publish via JitPack.
// See https://jitpack.io/docs/ANDROID/.
apply plugin: 'digital.wup.android-maven-publish'
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply plugin: 'kotlin-android-extensions'
apply plugin: "org.jetbrains.kotlin.android.extensions"

android {
    compileSdkVersion versions.compileSdkVersion

    androidExtensions {
        experimental = true
    }

    defaultConfig {
        minSdkVersion versions.proMinSdkVersion
        targetSdkVersion versions.targetSdkVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    buildTypes {
        release {
            consumerProguardFile 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds true
        abortOnError false
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

dependencies {
    androidTestImplementation libs.assertjCore
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'

    testImplementation libs.junit
    testImplementation libs.assertjCore
    testImplementation libs.robolectric
    testImplementation 'commons-io:commons-io:2.5'
    testImplementation libs.mockitoKotlin
    testImplementation libs.mockitoCore
    testImplementation libs.jodaTimeTzdb
    testImplementation libs.kluent
    testImplementation libs.androidxTesting

    implementation libs.supportAnnotations
    implementation libs.jodaTimeAndroid
    implementation libs.rxjava2
    implementation libs.rxAndroid2
    implementation libs.gson
    implementation 'com.github.skedgo:commons-collections:v1.0'

    implementation project(':TripKitDomain')
    implementation libs.kotlin

    kapt libs.value
    compileOnly libs.valueAnnotations
    compileOnly libs.builderAnnotations
    implementation libs.immutablesGson
    implementation libs.javaxAnnotation
    compileOnly 'com.github.pengrad:jdk9-deps:1.0'
}


// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    configurations.implementation.canBeResolved = true
    configurations.api.canBeResolved = true
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.implementation
    classpath += configurations.api
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task showMeCache doLast() {
    configurations.implementation.each { println it }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
group = tripkitGroup
version = tripkitVersion

publishing {
    repositories {
        maven {
            url = "file://${localMaven}"
            //url = publishMavenUrl
            credentials {
                username = publishMavenUsername
                password = publishMavenToken
            }
        }
    }

    publications {
        mavenAar(MavenPublication) {
            groupId = group
            version = version
            from components.android
            // Exclude the duplicate artifact
            // in this example, we're excluding the "release" variant
//            components {
//                aar(MavenPublication) {
//                    println buildDir
////                    artifact("$buildDir/outputs/aar/my-library-debug.aar")
////                    artifact("$buildDir/outputs/aar/my-library-release.aar") {
////                        exclude = true
////                    }
//                }
//            }

            afterEvaluate {
                def publishedArtifacts = artifacts

                def extensionCounts = publishedArtifacts.collectEntries {
                    [(it.extension): []]
                }

                publishedArtifacts.each { artifact ->
                    extensionCounts[artifact.extension] << artifact.file.name
                }

                extensionCounts.each { extension, artifactNames ->
                    if (artifactNames.size() > 1) {
                        println "Multiple artifacts with extension '$extension' found: ${artifactNames.join(', ')}"
                    }
                }
            }

            pom {
                licenses {
                    license {
                        name = 'Commercial'
                    }
                }
            }
            pom.withXml {
                asNode().dependencies.'*'
                        .findAll() {
                            (it.scope.text() == 'runtime' || it.scope.text() == 'compile') &&
                                    project.configurations.implementation.allDependencies.find {
                                        dep -> dep.name == it.artifactId.text()
                                    }
                        }.each {
                            it.appendNode("type", "aar")
                        }
                asNode().dependencies.'*'
                        .findAll() {
                            it.scope.text() == 'runtime' &&
                                    project.configurations.implementation.allDependencies.find {
                                        dep -> dep.name == it.artifactId.text()
                                    }
                        }.each { it.scope*.value = 'compile'}
            }
        }
    }
}