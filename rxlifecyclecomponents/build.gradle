apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.1"


    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    publishing {
        singleVariant("release") {
            // if you don't want sources/javadoc, remove these lines
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    compileOnly "androidx.appcompat:appcompat:1.0.0"
    api 'com.trello.rxlifecycle3:rxlifecycle:3.0.0'
    compileOnly libs.rxjava2
    compileOnly libs.kotlin

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
group = tripkitGroup
version = tripkitVersion

publishing {
    repositories {
        maven {
            url = "file://${localMaven}"
            //url = publishMavenUrl
            credentials {
                username = publishMavenUsername
                password = publishMavenToken
            }
        }
    }

    publications {
        release(MavenPublication) {
            groupId = group
            version = version
            artifactId = 'rxlifecyclecomponents'
            afterEvaluate {
                from components.release
            }
            pom {
                licenses {
                    license {
                        name = 'Commercial'
                    }
                }
            }
            pom.withXml {
                asNode().dependencies.'*'
                        .findAll() {
                            (it.scope.text() == 'runtime' || it.scope.text() == 'compile') &&
                                    project.configurations.implementation.allDependencies.find {
                                        dep -> dep.name == it.artifactId.text()
                                    }
                        }.each {
                    it.appendNode("type", "aar")
                }
            }
        }
    }
}

