apply plugin: 'com.android.library'
apply plugin: 'digital.wup.android-maven-publish'
apply plugin: 'kotlin-android'

android {
  compileSdkVersion versions.compileSdkVersion

  // defaultPublishConfig 'debug'

  lintOptions {
    // Continue to check for errors in release builds,
    // but continue the build even when errors are found.
    checkReleaseBuilds true
    abortOnError false
  }

  defaultConfig {
    minSdkVersion versions.proMinSdkVersion
    targetSdkVersion versions.targetSdkVersion
    versionCode 1
    versionName '1.0'
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

dependencies {
  implementation project(':CommonCoreLegacy')
  implementation project(':sqliteutils')
  implementation libs.appCompat
  implementation libs.gson
  implementation libs.supportAnnotations
  implementation project(":TripKitDomain")
  implementation libs.kotlin
  implementation libs.rxjava2

  testImplementation libs.junit
  testImplementation libs.assertjCore
  testImplementation libs.mockitoCore
  testImplementation libs.robolectric
  testImplementation libs.androidxTesting
  testImplementation libs.androidxJUnitExtTesting
  testImplementation libs.mockitoKotlin, { exclude group: 'org.jetbrains.kotlin' }
  testImplementation libs.kluent
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0', {
    exclude group: 'com.android.support', module: 'support-annotations'
  }
}

group = tripkitGroup
version = tripkitVersion

publishing {
  repositories {
    maven {
      url = "file://${localMaven}"
      //url = publishMavenUrl
      credentials {
        username = publishMavenUsername
        password = publishMavenToken
      }
    }
  }

  publications {
    mavenAar(MavenPublication) {
      groupId = group
      version = version
      from components.android
      pom {
        licenses {
          license {
            name = 'Commercial'
          }
        }
      }
      pom.withXml {
        asNode().dependencies.'*'
                .findAll() {
                  (it.scope.text() == 'runtime' || it.scope.text() == 'compile') &&
                          project.configurations.implementation.allDependencies.find {
                            dep -> dep.name == it.artifactId.text()
                          }
                }.each {
          it.appendNode("type", "aar")
        }
      }
    }
  }
}

